AWSTemplateFormatVersion: "2010-09-09"
Description: WorkerManagement ECS Service Definition
Resources:
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ecs/wis
      RetentionInDays: 1

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
     VpcId: !ImportValue VPC
     GroupDescription: Container security group for ecs containers
     SecurityGroupIngress:
       - SourceSecurityGroupId: !ImportValue WorkerManagementECSClusterSG
         IpProtocol: '-1'

  NginxTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256"
      Memory: "512"
      ExecutionRoleArn: !ImportValue ECSTaskExecutionRole
      TaskRoleArn: !ImportValue ECSTaskExecutionRole
      Family: NginxServiceTask
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        -
          Name: NginxHello
          Image: bitnami/nginx
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: nginx

  NginxECSService:
    Type: AWS::ECS::Service
    DependsOn: NginxListenerRule
    Properties:
      Cluster: !ImportValue WorkerManagementECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: NginxHello
          ContainerPort: 8080
          TargetGroupArn: !Ref NginxTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
          - !ImportValue SubnetAZ1Private
          - !ImportValue SubnetAZ2Private
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      ServiceName: NginxHelloService
      TaskDefinition: !Ref NginxTaskDefinition

  NginxTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      TargetType: ip
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: "60"

  NginxListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !ImportValue LoadBalancerListener
      Priority: 103
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      Actions:
        - TargetGroupArn: !Ref NginxTargetGroup
          Type: forward

  WorkerManagementTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256"
      Memory: "512"
      ExecutionRoleArn: !ImportValue ECSTaskExecutionRole
      TaskRoleArn: !ImportValue ECSTaskExecutionRole
      Family: WorkerManagementServiceTask
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        -
          Name: WorkerManagementAPI
          Image: 574574226067.dkr.ecr.us-east-1.amazonaws.com/worker-management:1.96
          PortMappings:
            - ContainerPort: 3000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: worker-management

  WorkerManagementECSService:
    Type: AWS::ECS::Service
    DependsOn: WebListenerRule
    Properties:
      Cluster: !ImportValue WorkerManagementECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 30
      LoadBalancers:
        - ContainerName: WorkerManagementAPI
          ContainerPort: 3000
          TargetGroupArn: !Ref WebTargetGroup

      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
          - !ImportValue SubnetAZ1Private
          - !ImportValue SubnetAZ2Private
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      ServiceName: WorkerManagementService
      TaskDefinition: !Ref WorkerManagementTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      TargetType: ip
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      HealthCheckPath: /workers/service_status
      HealthCheckProtocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: "60"

  WebListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !ImportValue LoadBalancerListener
      Priority: 102
      Conditions:
        - Field: path-pattern
          Values:
            - /worker*
      Actions:
        - TargetGroupArn: !Ref WebTargetGroup
          Type: forward

Outputs:
  WorkerManagementServiceStatusEndpoint:
    Description: Endpoint for service status
    Value: !Sub
      - 'http://${LoadBalancerEndpoint}/workers/service_status'
      -
        LoadBalancerEndpoint: !ImportValue WorkerManagementDomainName
  WorkerManagementServiceEndpoint:
    Description: Endpoint for service
    Value: !ImportValue WorkerManagementDomainName
